FORMAT: 1A
HOST: http://diarystory.site/

# Snippet.io

성냥팔이 소년들을 위한 깜찍한 API

# Group 인증 관련
## Authorizations [/auth]

### Login [GET /auth/github/login{?redirect}]
+ Parameters
    + redirect (string, required) - 로그인 후 리다이렉트될 URL

+ Response 200

        {
            "redirect_url": "http://~~~"
        }

+ Response 400

        {
            "message": "올바르지 않는 입력값입니다."
        }

### Issue Access Token [POST /auth/github/accesstoken{?code}]
+ Attribute
    + code (string, required) - github 로그인 후 쿼리로 받은 code 값

+ Response 200 (application/json)

        {
            "access_token": "토큰값",
            "id": "유저의 id"
        }

+ Response 400
    
        {
            "message": "올바르지 않는 입력값입니다."
        }

+ Response 401

        {
            "message": "해당 code값으로 인증할 수 없습니다."
        }
        
# Group 코드 스니펫 관련
## 코드 스니펫 [/codes]

### Create Code [POST]
+ Attribute
    + title (string, required)
    + content (string, required)
    + language (string, required)
    + description (string)
    
+ Request (application/json)
    + header
        
            Authorization: 토큰토큰

+ Response 201
+ Response 400

### Search codes [GET /codes{?limit,offset,search,language,order}]
+ Parameters
    + limit (number, required)
    + offset (number, required)
    + search (string, optional) - 검색어(title과 content 중에서 검색)
    + language (string, optional) - 언어 필터링
    + order (string, optional) - 정렬(가능한 값: stars)

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "title": "코드",
                "content": "내용",
                "language": "rust",
                "description": "설명",
                "author": "작성자 id",
                "created_datetime": "YYYY-MM-DDTHH:MM:SS.sss+09:00 - 생성된 시간, ISO 8601표준을 따름"
            }
        ]
        
+ Response 400

### Get code [GET /codes/{id}]
+ Parameters
    + id (number, required) - code id

+ Request (application/json)
    + header 
        
            Authorization: 토큰토큰
+ Response 200 (application/json)
    
        {
            "id": 1,
            "title": "코드",
            "content": "내용",
            "language": "rust",
            "description": "설명",
            "author": "작성자 id",
            "created_datetime": "YYYY-MM-DDTHH:MM:SS.sss+09:00 - 생성된 시간, ISO 8601표준을 따름"
        }
        
+ Response 400
+ Response 403
+ Response 404


### Modify Code [PUT /codes/{id}]
+ Parameters
    + id (number, required) - code id
+ Attribute
    + title (string, required)
    + content (string, required)
    + language (string, required)
    + description (string)
    
+ Request (application/json)
    + header
        
            Authorization: 토큰토큰

+ Response 200
+ Response 400
+ Response 403
+ Response 404

### Delete Code [DELETE /codes/{id}]
+ Parameters
    + id (number, required) - code id

+ Request (application/json)
    + header
        
            Authorization: 토큰토큰

+ Response 200
+ Response 403
+ Response 404

## 코드 스타링 [/codes/{id}/stars]
+ Parameters
    + id (number, required) - code id

### Star the code [POST]
+ Request (application/json)
    + header
        
            Authorization: 토큰토큰
+ Response 200
+ Response 403
+ Response 404

### Unstar the code [DELETE]
+ Request (application/json)
    + header
        
            Authorization: 토큰토큰
+ Response 200
+ Response 403
+ Response 404

# Group 유저 관련
## 유저 [/users]
### Get User [GET /users/{id}]
+ Parameters
    + id (number, required) - 유저 id

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "jungwoo",
            "profile_image_url": "https://avatars.githubusercontent.com/u/44115353?v=4"
        }
    
## 유저의 코드 [/users/{id}/codes]
+ Parameters
    + id (number, required) - 유저 식별자
### Get User's codes [GET]
+ Request (application/json)
    + header
        
            Authorization: 토큰토큰
            
+ Response 200
    
        [
            {
                "id": 1,
                "title": "코드",
                "content": "내용",
                "language": "rust",
                "description": "설명",
                "author": "작성자 id",
                "created_datetime": "YYYY-MM-DDTHH:MM:SS.sss+09:00 - 생성된 시간, ISO 8601표준을 따름"
            }
        ]

### Get stared code by user [GET /user/{id}/staring/codes]
+ Parameters
    + id (number, required) - 유저 식별자
+ Request (application/json)
    + header
        
            Authorization: 토큰토큰
+ Response 200
    
        [
            {
                "id": 1,
                "title": "코드",
                "content": "내용",
                "language": "rust",
                "description": "설명",
                "author": "작성자 id",
                "created_datetime": "YYYY-MM-DDTHH:MM:SS.sss+09:00 - 생성된 시간, ISO 8601표준을 따름"
            }
        ]